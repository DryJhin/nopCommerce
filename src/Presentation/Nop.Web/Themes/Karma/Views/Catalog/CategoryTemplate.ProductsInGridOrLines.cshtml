@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}

@*category breadcrumb*@
@section Breadcrumb
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <h1>Shop Category page</h1>
        <nav class="d-flex align-items-center" itemscope itemtype="http://schema.org/BreadcrumbList">
            <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")<span class="lnr lnr-arrow-right"></span></a>
            @{ int position = 1; }
            @foreach (var cat in Model.CategoryBreadcrumb)
            {
                var isLastCategory = cat.Id == Model.Id;

                @if (isLastCategory)
                {
                    <a href="@Url.RouteUrl("Category", new {SeName = cat.SeName})" title="@T("Categories.Breadcrumb.Top")" itemscope itemprop="item">
                        <span itemprop="item" itemscope itemtype="http://schema.org/Thing" id="@Url.RouteUrl("Category", new {SeName = cat.SeName})">
                            @cat.Name
                        </span>
                    </a>
                }
                else
                {
                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" itemprop="item" itemscope itemtype="http://schema.org/Thing">
                        <span itemprop="name">@cat.Name</span>
                        <span class="lnr lnr-arrow-right"></span>
                    </a>
                }
                <meta itemprop="position" content="@position" />
                position++;
            }
        </nav>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}

@section Description
{
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <section class="container mb-5">
            <div class="module">
                <h3 class="text-center">@Model.Name</h3>
                <div class="collapse" id="collapseExample" aria-expanded="false">
                    @Html.Raw(Model.Description)
                </div>

            </div>
            <div class="module text-center">
                <a role="button" class="collapsed text-center" data-toggle="collapse" href="#collapseExample"
                   aria-expanded="false" aria-controls="collapseExample"></a>
            </div>
        </section>
    }
}

@if (Model.Products.Count > 0)
{
    <!-- Start Filter Bar -->
    <div class="filter-bar d-flex flex-wrap align-items-center mb-2">
        @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
    </div>
}

<!-- Start Products Seller -->
<section class="lattest-product-area pb-40 category-list">
    <div class="row">
        @*description
            @if (!string.IsNullOrWhiteSpace(Model.Description))
            {
                <div class="category-description">
                    @Html.Raw(Model.Description)
                </div>
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            @foreach (var item in Model.SubCategories)
            {
                <div class="col-lg-4 col-md-6">
                    <div class="single-deal">
                        <div class="overlay"></div>
                        <img class="img-fluid w-100" alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title">
                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" target="_parent">
                            <div class="deal-details">
                                <h6 class="deal-title">@item.Name</h6>
                            </div>
                        </a>
                    </div>
                </div>
            }
        }
        else
        {
            @if (Model.Products.Count > 0)
            {

                @foreach (var product in Model.Products)
                {
                    <div class="col-lg-4 col-md-6">
                        @await Html.PartialAsync("_ProductBox", product)
                    </div>
                }

            }
        }
        @*@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
            featured products
            @if (Model.FeaturedProducts.Count > 0)
            {
                <div class="product-grid featured-product-grid">
                    <div class="title">
                        <strong>@T("Products.FeaturedProducts")</strong>
                    </div>
                    <div class="item-grid">
                        @foreach (var item in Model.FeaturedProducts)
                        {
                            <div class="item-box">
                                @await Html.PartialAsync("_ProductBox", item)
                            </div>
                        }
                    </div>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })*@
        @*<div class="product-filters">
                    filtering
                    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                    {
                        @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                    }
                    filtering
                    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                    {
                        @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                    }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })*@


        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</section>

@if (Model.Products.Count > 0)
{
    <!-- Start Filter Bar -->
    <div class="filter-bar d-flex flex-wrap align-items-center">
        @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
    </div>
}