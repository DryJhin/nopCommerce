@model BlogPostModel
@{
    Layout = "_BlogLayout";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-blogpost-page");
}
@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBlogBefore })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterBlogArchive })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBlogAfter })
}

<!--product breadcrumb-->
@section Breadcrumb
{
    @Html.BuildBreadcrumbNavigation()
}

<div class="single-post row">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageTop, additionalData = Model })
    @*<div class="col-lg-12">
            <div class="feature-img">
                <img class="img-fluid" src="img/blog/feature-img1.jpg" alt="">
            </div>
        </div>*@
    <div class="col-lg-12">
        <div class="blog_info text-right">
            @if (Model.Tags.Count > 0)
            {
                <div class="post_tag">
                    @for (var i = 0; i < Model.Tags.Count; i++)
                    {
                        var tag = Model.Tags[i];
                        @if (i != Model.Tags.Count - 1)
                        {
                            tag = tag + ",";
                        }

                        <a href="@Url.RouteUrl("BlogByTag", new {tag = tag})">
                            @tag
                        </a>
                    }
                </div>
            }
            <ul class="blog_meta list">
                @*<li><a href="#">Mark wiens<i class="lnr lnr-user"></i></a></li>*@
                <li><a href="#">-@Model.CreatedOn.ToString("D")<i class="lnr lnr-calendar-full"></i></a></li>
                @*<li><a href="#">1.2M Views<i class="lnr lnr-eye"></i></a></li>*@
                @if (Model.AllowComments)
                {
                    <li><a href="@Url.RouteUrl("BlogPost", new {SeName = Model.SeName})#comments" class="read-comments">@string.Format(T("Blog.CommentsLink").Text, Model.NumberOfComments)</a></li>
                }
            </ul>
        </div>
    </div>
    <div class="col-lg-12 blog_details">
        <h2>@Model.Title</h2>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageBeforeBody, additionalData = Model })
        @Html.Raw(Model.Body)
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageBeforeComments, additionalData = Model })
    @if (Model.AllowComments)
    {
        @if (Model.Comments.Count > 0)
        {
            <div class="comments-area">
                <h4>@Model.Comments.Count @T("Blog.Comments")</h4>
                @foreach (var comment in Model.Comments)
                {
                    <div class="comment-list">
                        <div class="single-comment justify-content-between d-flex">
                            <div class="user justify-content-between d-flex">
                                <div class="thumb">
                                    @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                    {
                                        @if (comment.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="avatar-img-link">
                                                <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                            </a>
                                        }
                                        else
                                        {
                                            <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                        }
                                    }
                                </div>
                                <div class="desc">
                                    <h5>
                                        @if (comment.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})">@(comment.CustomerName)</a>
                                        }
                                        else
                                        {
                                            @(comment.CustomerName)
                                        }
                                    </h5>
                                    <p class="date">@comment.CreatedOn.ToString("g") </p>
                                    <p class="comment">
                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
                                    </p>
                                </div>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageInsideComment, additionalData = comment })
                        </div>
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageAfterComments, additionalData = Model })
        <div class="comment-form">
            <h4>@T("Blog.Comments.LeaveYourComment")</h4>
            <div class="notifications">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                @{
                    var result = TempData["nop.blog.addcomment.result"] as string;
                }
                @if (!string.IsNullOrEmpty(result))
                {
                    <div class="result">@result</div>
                }
            </div>
            <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                <div class="form-group">
                    <textarea asp-for="AddNewComment.CommentText" class="form-control mb-10" rows="5" placeholder="Messege" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Messege'" required=""></textarea>
                    <span asp-validation-for="AddNewComment.CommentText"></span>
                </div>
                @if (Model.AddNewComment.DisplayCaptcha)
                {
                    <div class="form-group">
                        <div class="captcha-box">
                            <nop-captcha />
                        </div>
                    </div>
                }
                <input type="submit" name="add-comment" class="primary-btn submit_btn" value="@T("Blog.Comments.SubmitButton")" />
            </form>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogPostPageBottom, additionalData = Model })
</div>