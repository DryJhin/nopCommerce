@model CustomerAddressListModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-address-list-page");
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Addresses })
}

<!--product breadcrumb-->
@section Breadcrumb
{
    @Html.BuildBreadcrumbNavigation()
}

<section class="d-flex align-content-center justify-content-center pl-5">
    <div class="row">
        <div class="col-md-12">
            <h3 class="text-center">@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h3>
            <nop-antiforgery-token />
            @if (Model.Addresses.Count > 0)
            {
                @for (var i = 0; i < Model.Addresses.Count; i++)
                {
                    var address = Model.Addresses[i];
                    <div class="row mt-3">
                        <div class="col-md-6 col-sm-12 form-group">
                            <label>First Name</label>
                            <input type="text" required class="single-input" disabled value="@address.FirstName">
                        </div>
                        <div class="col-md-6 col-sm-12 form-group">
                            <label>Last Name</label>
                            <input type="text" required class="single-input" disabled value="@address.LastName">
                        </div>
                        <div class="col-md-6 col-sm-12 form-group">
                            <label>@T("Address.Fields.Email")</label>
                            <input type="text" required class="single-input" disabled value="@address.Email">
                        </div>
                        @if (address.PhoneEnabled)
                        {
                            <div class="col-md-6 col-sm-12 form-group">
                                <label>@T("Address.Fields.PhoneNumber")</label>
                                <input type="text" required class="single-input" disabled value="@address.PhoneNumber">
                            </div>
                        }
                        @if (address.FaxEnabled)
                        {
                            <div class="col-md-6 col-sm-12 form-group">
                                <label>@T("Address.Fields.FaxNumber")</label>
                                <input type="text" required class="single-input" disabled value="@address.FaxNumber">
                            </div>
                        }

                        @if (address.CompanyEnabled && !string.IsNullOrEmpty(address.Company))
                        {
                            <div class="col-md-6 col-sm-12 form-group">
                                <label>Company</label>
                                <input type="text" required class="single-input" disabled value="@address.Company">
                            </div>
                        }
                        @if (address.StreetAddressEnabled)
                        {
                            <div class="col-md-12 col-sm-12 form-group">
                                <label>Address 1</label>
                                <input type="text" required class="single-input" disabled value="@address.Address1">
                            </div>
                        }
                        @if (address.StreetAddress2Enabled && !string.IsNullOrEmpty(address.Address2))
                        {
                            <div class="col-md-12 col-sm-12 form-group">
                                <label>Address 2</label>
                                <input type="text" required class="single-input" disabled value="@address.Address2">
                            </div>
                        }
                        @if (address.CityEnabled && !string.IsNullOrEmpty(address.City) ||
          address.CountyEnabled && !string.IsNullOrEmpty(address.County) ||
          address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
          address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            var addressLine = string.Empty;
                            if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                            {
                                addressLine += address.City;
                                if (address.CountyEnabled && !string.IsNullOrEmpty(address.County) ||
                                    address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
                                    address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                {
                                    addressLine += ", ";
                                }
                            }
                            if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                            {
                                addressLine += address.County;
                                if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName) ||
                                    address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                {
                                    addressLine += ", ";
                                }
                            }
                            if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                            {
                                addressLine += address.StateProvinceName;
                                if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                {
                                    addressLine += ", ";
                                }
                            }
                            if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                            {
                                addressLine += address.ZipPostalCode;
                            }
                            <div class="col-md-12 col-sm-12 form-group">
                                <label>Address Line</label>
                                <input type="text" required class="single-input" disabled value="@addressLine">
                            </div>
                        }
                        @if (address.CountryEnabled && !string.IsNullOrEmpty(address.CountryName))
                        {
                            <div class="col-md-12 col-sm-12 form-group">
                                <label>Country</label>
                                <input type="text" required class="single-input" disabled value="@address.CountryName">
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                        {
                            <div class="col-md-12 col-sm-12 form-group">
                                @Html.Raw(address.FormattedCustomAddressAttributes)
                            </div>
                        }
                    </div>
                    <div class="row mt-3 text">
                        <div class="col-md-6 form-group">
                            <input type="button" class="primary-btn" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'" value="@T("Common.Edit")" />
                        </div>
                        <div class="col-md-6 form-group">
                            <input type="button" class="primary-btn" onclick="deletecustomeraddress(@(address.Id))" value="@T("Common.Delete")" />
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="row mt-5">
                    <h5 class="text-center">
                        @T("Account.CustomerAddresses.NoAddresses")
                    </h5>
                </div>
            }
            <div class="row mt-3 text">
                <div class="col-md-12 form-group">
                    <input type="button" class="generic-btn primary-btn w-100" style="border-radius: 0px;line-height: 38px;" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'" value="@T("Common.AddNew")" />
                </div>
            </div>
        </div>
    </div>
</section>

<script asp-location="Footer">
    function deletecustomeraddress(addressId) {
        if (confirm('@T("Common.AreYouSure")')) {
            var postData = {
                addressId: addressId
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@Url.Action("AddressDelete", "Customer")",
                data: postData,
                dataType: "json",
                success: function (data, textStatus, jqXHR) {
                    location.href = data.redirect;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Failed to delete');
                }
            });
        }
    }
</script>